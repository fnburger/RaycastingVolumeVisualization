#ifndef GL_ES
#version 330 es
#endif

precision highp int;
precision highp float;
precision highp sampler3D;

//uniform vec3 color[2];
//uniform int colorIdx;

uniform vec3 boundBox;
uniform sampler3D volume;
uniform vec2 resolution;
uniform float u_isoValue;

in vec3 rayDir;
in vec3 transformedEye;

out vec4 fragColor;

// returns the hit with the boundBox
vec2 intersectBox(vec3 r0, vec3 dir) {
    vec3 boxMin = vec3(-boundBox.x/2.0, -boundBox.y/2.0, -boundBox.z/2.0);
    vec3 boxMax = vec3(boundBox.x/2.0, boundBox.y/2.0, boundBox.z/2.0);
    vec3 invDir = 1.0 / dir;
    vec3 tmin_tmp = (boxMin - r0) * invDir;
    vec3 tmax_tmp = (boxMax - r0) * invDir;
    vec3 tmin = min(tmin_tmp, tmax_tmp);
    vec3 tmax = max(tmin_tmp, tmax_tmp);
    float t0 = max(tmin.x, max(tmin.y, tmin.z));
    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    return vec2(t0, t1);
}

// returns the interpolated 3d position of the first intersection point of the ray and the volume
vec3 computeFirstHit(vec3 pos_current, vec3 pos_next, float value_current, float value_next) {
    float t = (u_isoValue - value_current) / (value_next - value_current);
    return pos_current + t * (pos_next - pos_current);
}

void main() {

    // ############# sampling the volume ##############

    // Intersect ray with volume using slab method
    vec3 rayDirection = normalize(rayDir);
    vec3 rayOrigin = transformedEye;

    vec2 t_hit = intersectBox(rayOrigin, rayDirection);
    if(t_hit.x > t_hit.y){
      discard; // No hit
    }
    // ignore voxels behind the camera
    t_hit.x = max(t_hit.x, 0.0);

    // define step size multiplier. Higher is less accurate but more performant.
    float dtMulti = 75.0;
    // define step size for marching through volume
    vec3 dt_vec = 1.0 / (vec3(boundBox) * abs(rayDirection));
    float dt = min(dt_vec.x, min(dt_vec.y, dt_vec.z)) * dtMulti;
    
    // define bounds
    vec3 boundingBoxMin = vec3(-boundBox.x, boundBox.y, boundBox.z);
    vec3 boundingBoxMax = vec3(boundBox.x, -boundBox.y, -boundBox.z);

    // ###### starting from the entry point, march the ray through the volume and sample it ######
    vec3 p = rayOrigin * 2.0 + (t_hit.x) * rayDirection; // initialize sampling position
    bool firstHitFound = false;
    vec3 firstHitPosition = vec3(0.0);

    for (float t = t_hit.x; t < t_hit.y; t += dt) {
      // compute position in volume to sample
      vec3 samplePos = p + rayDirection * t;
      vec3 texCoord = (samplePos - boundingBoxMax) / ((boundingBoxMin - boundingBoxMax) * 1.0);
      // sample 3d texture 
      float alpha = texture(volume, texCoord).r;

      if (firstHitFound) {
            break; // this ray is done after its crossing of the ISO value was found
        }

      // first-hit compositing: check for first time the ISO value is crossed
        if (alpha >= u_isoValue) {
            vec3 prevSamplePos = samplePos - rayDirection * dt;
            vec3 prevTexCoord = (prevSamplePos - boundingBoxMax) / ((boundingBoxMin - boundingBoxMax) * 1.0);
            float prevAlpha = texture(volume, prevTexCoord).r;

            if (prevAlpha < u_isoValue) {
                firstHitPosition = computeFirstHit(prevSamplePos, samplePos, prevAlpha, alpha);
                firstHitFound = true;
            }
        }

      // make next step along ray
      p += rayDirection * dt;
    }

    // ####### shading #######
    if (firstHitFound) {
        // use firstHitPosition for shading
        fragColor = vec4(firstHitPosition, 1.0);
    } else {
        fragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
}

